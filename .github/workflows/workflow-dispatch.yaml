name: Workflow Dispatch

on:
  workflow_dispatch:
    # inputs:
    #   logLevel:
    #     description: "Log level"
    #     required: true
    #     default: "warning"
    #     type: choice
    #     options:
    #       - info
    #       - warning
    #       - debug
    #   tags:
    #     description: "Test scenario tags"
    #     required: false
    #     type: boolean
    # environment:
    #   description: "Environment to run tests against"
    #   type: environment
    #   required: true
jobs:
  sync-source-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Check whether the ref is a tag
        run: |
          echo "Log level: $LEVEL"
          echo "Tags: $TAGS"
          echo "Environment: $ENVIRONMENT"
          echo "Ref: $REF"
          env
        env:
          # LEVEL: ${{ inputs.logLevel }}
          REF: ${{ github.ref }}
          # TAGS: ${{ inputs.tags }}
          # ENVIRONMENT: ${{ inputs.environment }}.

      - name: Check whether the ref is a tag
        run: |
          if [[ $GITHUB_REF_TYPE != "tag" ]]; then
            echo "Ref is not a tag"
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # Default: 1
          fetch-depth: 0

          persist-credentials: false

      - name: push tag to target repo
        run: |
          env
          # git status
          # git log --oneline --decorate --graph --all
          RELEASE_DATA=$(gh release view ${GITHUB_REF_NAME} --json 'apiUrl,body,createdAt,isPrerelease,isDraft,name,tagName,targetCommitish,url')

          BRANCH=$(printf '%s' "$RELEASE_DATA" | jq -r '.targetCommitish')
          BODY=$(printf '%s' "$RELEASE_DATA" | jq -r '.body')
          IS_PRERELEASE=$(printf '%s' "$RELEASE_DATA" | jq -r '.isPrerelease')
          IS_DRAFT=$(printf '%s' "$RELEASE_DATA" | jq -r '.isDraft')

          echo "Branch: $BRANCH"
          echo "Body: $BODY"
          echo "Is prerelease: $IS_PRERELEASE"
          echo "Is draft: $IS_DRAFT"
          echo "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          git remote add target https://${TARGET_REPO_USERNAME}:${{ secrets.TARGET_REPO_GITHUB_TOKEN }}@${TARGET_REPO}
          git fetch target

          # check if the tag is already pushed
          ALREADY_PUSHED=$(git branch -r --contains HEAD | grep "\btarget/${BRANCH}\b" | wc -l | tr -d ' ')  

          echo "ALREADY_PUSHED: $ALREADY_PUSHED"
          if [[ $ALREADY_PUSHED -gt 0 ]]; then
            echo "Branch already pushed"
            exit 0
          fi

          # push the tag
          git push target ${GITHUB_REF_NAME}:${BRANCH}
          git push target ${GITHUB_REF_NAME}

          # append markdown link to body env
          BODY="${BODY}\n\n### modusign-gov tenant deployment log\n- [gov-deployed] [![Workflow Dispatch](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/workflows/workflow-dispatch.yaml/badge.svg?branch=${GITHUB_REF_NAME})](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
          echo -e "$BODY" | gh release edit ${GITHUB_REF_NAME} -F -
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_REPO_USERNAME: atobaum
          TARGET_REPO: github.com/atobaum/semantic-release-test2.git

  notify-failure:
    needs: [sync-source-commit]
    runs-on: ubuntu-latest
    env:
      SLACK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Notify status success
        uses: lazy-actions/slatify@master
        with:
          type: ${{ job.status }}
          job_name: "${GITHUB_REPOSITORY} 서비스 source commit sync"
          url: ${{ env.SLACK_URL }}
